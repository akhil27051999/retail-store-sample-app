AWSTemplateFormatVersion: '2010-09-09'
Description: 'Serverless Weather App - Lambda Function and API Gateway'

Parameters:
  OpenWeatherAPIKey:
    Type: String
    Description: OpenWeather API Key
    NoEcho: true
  
  ZipCode:
    Type: String
    Default: '10001'
    Description: ZIP code for weather location
  
  CountryCode:
    Type: String
    Default: 'US'
    Description: Country code (e.g., US, UK, IN)

Resources:
  # IAM Role for Lambda
  WeatherLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: WeatherApp-LambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: Project
          Value: WeatherApp

  # Lambda Function
  WeatherLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: weather-app-function
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt WeatherLambdaRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return {
              statusCode: 200,
              body: JSON.stringify({ message: 'Please upload the actual code' })
            };
          };
      Environment:
        Variables:
          OPENWEATHER_API_KEY: !Ref OpenWeatherAPIKey
          ZIP_CODE: !Ref ZipCode
          COUNTRY_CODE: !Ref CountryCode
      Timeout: 30
      MemorySize: 128
      Tags:
        - Key: Project
          Value: WeatherApp

  # API Gateway REST API
  WeatherAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: weather-app-api
      Description: Weather App API Gateway
      Tags:
        - Key: Project
          Value: WeatherApp

  # API Gateway Resource
  WeatherResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref WeatherAPI
      ParentId: !GetAtt WeatherAPI.RootResourceId
      PathPart: weather

  # API Gateway Method
  WeatherMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WeatherAPI
      ResourceId: !Ref WeatherResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WeatherLambdaFunction.Arn}/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseHeaders:
            Access-Control-Allow-Origin: "'*'"

  # Lambda Permission for API Gateway
  WeatherLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WeatherLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub '${WeatherAPI}/*/GET/weather'

  # API Gateway Deployment
  WeatherAPIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: WeatherMethod
    Properties:
      RestApiId: !Ref WeatherAPI
      StageName: prod

Outputs:
  APIEndpoint:
    Description: Weather API Endpoint URL
    Value: !Sub 'https://${WeatherAPI}.execute-api.${AWS::Region}.amazonaws.com/prod/weather'
    Export:
      Name: !Sub '${AWS::StackName}-APIEndpoint'
  
  LambdaFunctionName:
    Description: Lambda Function Name
    Value: !Ref WeatherLambdaFunction
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunction'