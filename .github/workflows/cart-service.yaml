name: Cart Service CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/cart/**'
      - '.github/workflows/cart-service.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/cart/**'

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: retail-store/cart-service
  SERVICE_NAME: cart-service

jobs:
  build-and-deploy:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'corretto'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run tests
      working-directory: ./src/cart
      run: ./mvnw test
      
    - name: Build application
      working-directory: ./src/cart
      run: ./mvnw clean package -DskipTests
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Build, tag, and push image to Amazon ECR
      working-directory: ./src/cart
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        
        # Push image to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # Output image URI
        echo "Image URI: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        
    - name: Update Kubernetes manifests
      if: github.ref == 'refs/heads/main'
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Update image tag in Kubernetes manifests (if you have them)
        sed -i "s|image: .*$SERVICE_NAME.*|image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG|g" k8s/cart-service.yaml || echo "No K8s manifest to update"
        
    - name: Security scan with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
  notify:
    name: Notify deployment status
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: always()
    
    steps:
    - name: Notify success
      if: needs.build-and-deploy.result == 'success'
      run: |
        echo "✅ Cart Service deployed successfully!"
        echo "Image: ${{ needs.build-and-deploy.outputs.image-uri }}"
        
    - name: Notify failure
      if: needs.build-and-deploy.result == 'failure'
      run: |
        echo "❌ Cart Service deployment failed!"
        exit 1
