# ===============================================================================
# RETAIL STORE SAMPLE APPLICATION - KUBERNETES MANIFESTS v02
# Modern Implementation with Application Load Balancer (ALB) and Detailed Comments
# ===============================================================================

# ===============================================================================
# CATALOG SERVICE COMPONENTS
# Purpose: Product catalog microservice with MySQL database
# ===============================================================================

# ServiceAccount: Provides identity for catalog service pods
# Kind: ServiceAccount - Kubernetes identity used by pods for RBAC and AWS IAM integration
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: catalog
  labels:
    helm.sh/chart: catalog-1.2.2
    app.kubernetes.io/name: catalog
    app.kubernetes.io/instance: catalog
    app.kubernetes.io/component: service
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm

# Secret: Stores sensitive database credentials (base64 encoded)
# Kind: Secret - Securely stores sensitive data like passwords, tokens, keys
---
apiVersion: v1
kind: Secret
metadata:
  name: catalog-db
data:
  # Base64 encoded: catalog
  RETAIL_CATALOG_PERSISTENCE_USER: "Y2F0YWxvZw=="
  # Base64 encoded: gjEcijAD7OSDnHf8
  RETAIL_CATALOG_PERSISTENCE_PASSWORD: "Z2pFY2lqQUQ3T1NEbkhmOA=="

# ConfigMap: Non-sensitive configuration data for catalog service
# Kind: ConfigMap - Stores configuration data as key-value pairs
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: catalog
data:
  RETAIL_CATALOG_PERSISTENCE_PROVIDER: mysql
  RETAIL_CATALOG_PERSISTENCE_ENDPOINT: catalog-mysql:3306
  RETAIL_CATALOG_PERSISTENCE_DB_NAME: catalog

# Service: Internal network endpoint for MySQL database
# Kind: Service - Provides stable network endpoint and load balancing for pods
---
apiVersion: v1
kind: Service
metadata:
  name: catalog-mysql
  labels:
    helm.sh/chart: catalog-1.2.2
    app.kubernetes.io/name: catalog
    app.kubernetes.io/instance: catalog
    app.kubernetes.io/component: mysql
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP  # Internal-only service, not exposed outside cluster
  ports:
    - port: 3306
      targetPort: mysql
      protocol: TCP
      name: mysql
  selector:
    app.kubernetes.io/name: catalog
    app.kubernetes.io/instance: catalog
    app.kubernetes.io/component: mysql
    app.kubernetes.io/owner: retail-store-sample

# Service: Internal network endpoint for catalog API
# Kind: Service - ClusterIP type for internal communication only
---
apiVersion: v1
kind: Service
metadata:
  name: catalog
  labels:
    helm.sh/chart: catalog-1.2.2
    app.kubernetes.io/name: catalog
    app.kubernetes.io/instance: catalog
    app.kubernetes.io/component: service
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP  # Internal service for microservice communication
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: catalog
    app.kubernetes.io/instance: catalog
    app.kubernetes.io/component: service
    app.kubernetes.io/owner: retail-store-sample

# Deployment: Manages catalog service application pods
# Kind: Deployment - Manages stateless application replicas with rolling updates
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: catalog
  labels:
    helm.sh/chart: catalog-1.2.2
    app.kubernetes.io/name: catalog
    app.kubernetes.io/instance: catalog
    app.kubernetes.io/component: service
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1  # Number of pod instances
  strategy:
    rollingUpdate:
      maxUnavailable: 1  # Maximum pods unavailable during update
    type: RollingUpdate  # Zero-downtime deployment strategy
  selector:
    matchLabels:
      app.kubernetes.io/name: catalog
      app.kubernetes.io/instance: catalog
      app.kubernetes.io/component: service
      app.kubernetes.io/owner: retail-store-sample
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics  # Prometheus monitoring configuration
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/name: catalog
        app.kubernetes.io/instance: catalog
        app.kubernetes.io/component: service
        app.kubernetes.io/owner: retail-store-sample
    spec:
      serviceAccountName: catalog
      securityContext:
        fsGroup: 1000  # File system group for volume permissions
      containers:
        - name: catalog
          envFrom:
            - configMapRef:
                name: catalog  # Inject configuration from ConfigMap
            - secretRef:
                name: catalog-db  # Inject secrets from Secret
          securityContext:
            capabilities:
              drop:
              - ALL  # Drop all Linux capabilities for security
            readOnlyRootFilesystem: true  # Prevent writes to root filesystem
            runAsNonRoot: true  # Run as non-root user
            runAsUser: 1000  # Specific user ID
          image: "public.ecr.aws/aws-containers/retail-store-sample-catalog:1.2.2"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          readinessProbe:  # Health check for load balancer routing
            httpGet:
              path: /health
              port: 8080
          resources:
            limits:
              memory: 256Mi  # Maximum memory usage
            requests:
              cpu: 256m      # Minimum CPU allocation
              memory: 256Mi  # Minimum memory allocation
          volumeMounts:
            - mountPath: /tmp
              name: tmp-volume  # Writable temporary directory
      volumes:
        - name: tmp-volume
          emptyDir:
            medium: Memory  # In-memory temporary storage

# StatefulSet: Manages MySQL database with persistent identity
# Kind: StatefulSet - Manages stateful applications with stable network identity and storage
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: catalog-mysql
  labels:
    helm.sh/chart: catalog-1.2.2
    app.kubernetes.io/name: catalog
    app.kubernetes.io/instance: catalog
    app.kubernetes.io/component: mysql
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  serviceName: catalog-mysql  # Headless service for stable network identity
  selector:
    matchLabels:
      app.kubernetes.io/name: catalog
      app.kubernetes.io/instance: catalog
      app.kubernetes.io/component: mysql
      app.kubernetes.io/owner: retail-store-sample
  template:
    metadata:
      labels:
        app.kubernetes.io/name: catalog
        app.kubernetes.io/instance: catalog
        app.kubernetes.io/component: mysql
        app.kubernetes.io/owner: retail-store-sample
    spec:
      containers:
        - name: mysql
          image: "public.ecr.aws/docker/library/mysql:8.0"
          imagePullPolicy: IfNotPresent
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: my-secret-pw
            - name: MYSQL_DATABASE
              value: catalog
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: catalog-db
                  key: RETAIL_CATALOG_PERSISTENCE_USER
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: catalog-db
                  key: RETAIL_CATALOG_PERSISTENCE_PASSWORD
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql  # MySQL data directory
          ports:
            - name: mysql
              containerPort: 3306
              protocol: TCP
      volumes:
      - name: data
        emptyDir: {}  # Temporary storage (use PVC for production)

# ===============================================================================
# CART SERVICE COMPONENTS
# Purpose: Shopping cart microservice with DynamoDB local
# ===============================================================================

# ServiceAccount: Identity for cart service pods
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: carts
  labels:
    helm.sh/chart: carts-1.2.2
    app.kubernetes.io/name: carts
    app.kubernetes.io/instance: carts
    app.kubernetes.io/component: service
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm

# ConfigMap: Configuration for cart service and DynamoDB connection
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: carts
data:
  RETAIL_CART_PERSISTENCE_PROVIDER: dynamodb
  RETAIL_CART_PERSISTENCE_DYNAMODB_TABLE_NAME: Items
  RETAIL_CART_PERSISTENCE_DYNAMODB_CREATE_TABLE: "true"
  AWS_ACCESS_KEY_ID: key  # Dummy credentials for local DynamoDB
  AWS_SECRET_ACCESS_KEY: secret
  RETAIL_CART_PERSISTENCE_DYNAMODB_ENDPOINT: http://carts-dynamodb:8000

# Service: Internal endpoint for DynamoDB local
---
apiVersion: v1
kind: Service
metadata:
  name: carts-dynamodb
  labels:
    helm.sh/chart: carts-1.2.2
    app.kubernetes.io/name: carts
    app.kubernetes.io/instance: carts
    app.kubernetes.io/component: dynamodb
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8000
      targetPort: dynamodb
      protocol: TCP
      name: dynamodb
  selector:
    app.kubernetes.io/name: carts
    app.kubernetes.io/instance: carts
    app.kubernetes.io/component: dynamodb
    app.kubernetes.io/owner: retail-store-sample

# Service: Internal endpoint for cart API
---
apiVersion: v1
kind: Service
metadata:
  name: carts
  labels:
    helm.sh/chart: carts-1.2.2
    app.kubernetes.io/name: carts
    app.kubernetes.io/instance: carts
    app.kubernetes.io/component: service
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: carts
    app.kubernetes.io/instance: carts
    app.kubernetes.io/component: service
    app.kubernetes.io/owner: retail-store-sample

# Deployment: Cart service application
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: carts
  labels:
    helm.sh/chart: carts-1.2.2
    app.kubernetes.io/name: carts
    app.kubernetes.io/instance: carts
    app.kubernetes.io/component: service
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: carts
      app.kubernetes.io/instance: carts
      app.kubernetes.io/component: service
      app.kubernetes.io/owner: retail-store-sample
  template:
    metadata:
      annotations:
        prometheus.io/path: /actuator/prometheus
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/name: carts
        app.kubernetes.io/instance: carts
        app.kubernetes.io/component: service
        app.kubernetes.io/owner: retail-store-sample
    spec:
      serviceAccountName: carts
      securityContext:
        fsGroup: 1000
      containers:
        - name: carts
          env:
            - name: JAVA_OPTS
              value: -XX:MaxRAMPercentage=75.0 -Djava.security.egd=file:/dev/urandom
          envFrom:
            - configMapRef:
                name: carts
          securityContext:
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
          image: "public.ecr.aws/aws-containers/retail-store-sample-cart:1.2.2"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8080
            initialDelaySeconds: 10
          resources:
            limits:
              memory: 512Mi
            requests:
              cpu: 256m
              memory: 512Mi
          volumeMounts:
            - mountPath: /tmp
              name: tmp-volume
      volumes:
        - name: tmp-volume
          emptyDir:
            medium: Memory

# Deployment: DynamoDB local database
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: carts-dynamodb
  labels:
    helm.sh/chart: carts-1.2.2
    app.kubernetes.io/name: carts
    app.kubernetes.io/instance: carts
    app.kubernetes.io/component: dynamodb
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: carts
      app.kubernetes.io/instance: carts
      app.kubernetes.io/component: dynamodb
      app.kubernetes.io/owner: retail-store-sample
  template:
    metadata:
      labels:
        app.kubernetes.io/name: carts
        app.kubernetes.io/instance: carts
        app.kubernetes.io/component: dynamodb
        app.kubernetes.io/owner: retail-store-sample
    spec:
      containers:
        - name: dynamodb
          image: "public.ecr.aws/aws-dynamodb-local/aws-dynamodb-local:1.25.1"
          imagePullPolicy: IfNotPresent
          ports:
            - name: dynamodb
              containerPort: 8000
              protocol: TCP

# ===============================================================================
# ORDERS SERVICE COMPONENTS
# Purpose: Order processing microservice with PostgreSQL and RabbitMQ
# ===============================================================================

# ServiceAccount: Identity for orders service
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: orders
  labels:
    helm.sh/chart: orders-1.2.2
    app.kubernetes.io/name: orders
    app.kubernetes.io/instance: orders
    app.kubernetes.io/component: service
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm

# Secret: Empty RabbitMQ secret (placeholder)
---
apiVersion: v1
kind: Secret
metadata:
  name: orders-rabbitmq
data:

# Secret: PostgreSQL database credentials
---
apiVersion: v1
kind: Secret
metadata:
  name: orders-db
data:
  # Base64 encoded: orders
  RETAIL_ORDERS_PERSISTENCE_USERNAME: "b3JkZXJz"
  # Base64 encoded: bVurK7Zn3ibASuLJ
  RETAIL_ORDERS_PERSISTENCE_PASSWORD: "YlZ1cks3WnUzaWJBU3VMSg=="

# ConfigMap: Orders service configuration
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: orders
data:
  RETAIL_ORDERS_MESSAGING_PROVIDER: rabbitmq
  RETAIL_ORDERS_MESSAGING_RABBITMQ_ADDRESSES: orders-rabbitmq:5672
  RETAIL_ORDERS_PERSISTENCE_PROVIDER: postgres
  RETAIL_ORDERS_PERSISTENCE_ENDPOINT: orders-postgresql:5432
  RETAIL_ORDERS_PERSISTENCE_NAME: orders

# Service: PostgreSQL database endpoint
---
apiVersion: v1
kind: Service
metadata:
  name: orders-postgresql
  labels:
    helm.sh/chart: orders-1.2.2
    app.kubernetes.io/name: orders
    app.kubernetes.io/instance: orders
    app.kubernetes.io/component: postgresql
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 5432
      targetPort: postgresql
      protocol: TCP
      name: postgresql
  selector:
    app.kubernetes.io/name: orders
    app.kubernetes.io/instance: orders
    app.kubernetes.io/component: postgresql
    app.kubernetes.io/owner: retail-store-sample

# Service: RabbitMQ message broker endpoint
---
apiVersion: v1
kind: Service
metadata:
  name: orders-rabbitmq
  labels:
    helm.sh/chart: orders-1.2.2
    app.kubernetes.io/name: orders
    app.kubernetes.io/instance: orders
    app.kubernetes.io/component: rabbitmq
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 5672
      targetPort: amqp
      protocol: TCP
      name: amqp
    - port: 15672
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: orders
    app.kubernetes.io/instance: orders
    app.kubernetes.io/component: rabbitmq
    app.kubernetes.io/owner: retail-store-sample

# Service: Orders API endpoint
---
apiVersion: v1
kind: Service
metadata:
  name: orders
  labels:
    helm.sh/chart: orders-1.2.2
    app.kubernetes.io/name: orders
    app.kubernetes.io/instance: orders
    app.kubernetes.io/component: service
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: orders
    app.kubernetes.io/instance: orders
    app.kubernetes.io/component: service
    app.kubernetes.io/owner: retail-store-sample

# Deployment: Orders service application
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orders
  labels:
    helm.sh/chart: orders-1.2.2
    app.kubernetes.io/name: orders
    app.kubernetes.io/instance: orders
    app.kubernetes.io/component: service
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: orders
      app.kubernetes.io/instance: orders
      app.kubernetes.io/component: service
      app.kubernetes.io/owner: retail-store-sample
  template:
    metadata:
      annotations:
        prometheus.io/path: /actuator/prometheus
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/name: orders
        app.kubernetes.io/instance: orders
        app.kubernetes.io/component: service
        app.kubernetes.io/owner: retail-store-sample
    spec:
      serviceAccountName: orders
      securityContext:
        fsGroup: 1000
      containers:
        - name: orders
          env:
            - name: JAVA_OPTS
              value: -XX:MaxRAMPercentage=75.0 -Djava.security.egd=file:/dev/urandom
          envFrom:
            - secretRef:
                name: orders-rabbitmq
            - secretRef:
                name: orders-db
            - configMapRef:
                name: orders
          securityContext:
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
          image: "public.ecr.aws/aws-containers/retail-store-sample-orders:1.2.2"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8080
            initialDelaySeconds: 10
          resources:
            limits:
              memory: 512Mi
            requests:
              cpu: 256m
              memory: 512Mi
          volumeMounts:
            - mountPath: /tmp
              name: tmp-volume
      volumes:
        - name: tmp-volume
          emptyDir:
            medium: Memory

# StatefulSet: PostgreSQL database
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: orders-postgresql
  labels:
    helm.sh/chart: orders-1.2.2
    app.kubernetes.io/name: orders
    app.kubernetes.io/instance: orders
    app.kubernetes.io/component: postgresql
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  serviceName: orders-postgresql
  selector:
    matchLabels:
      app.kubernetes.io/name: orders
      app.kubernetes.io/instance: orders
      app.kubernetes.io/component: postgresql
      app.kubernetes.io/owner: retail-store-sample
  template:
    metadata:
      labels:
        app.kubernetes.io/name: orders
        app.kubernetes.io/instance: orders
        app.kubernetes.io/component: postgresql
        app.kubernetes.io/owner: retail-store-sample
    spec:
      containers:
        - name: postgresql
          image: "public.ecr.aws/docker/library/postgres:16.1"
          imagePullPolicy: IfNotPresent
          env:
            - name: POSTGRES_DB
              value: orders
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: orders-db
                  key: RETAIL_ORDERS_PERSISTENCE_USERNAME
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: orders-db
                  key: RETAIL_ORDERS_PERSISTENCE_PASSWORD
            - name: PGDATA
              value: /data/pgdata
          volumeMounts:
            - name: data
              mountPath: /data
          ports:
            - name: postgresql
              containerPort: 5432
              protocol: TCP
      volumes:
      - name: data
        emptyDir: {}

# StatefulSet: RabbitMQ message broker
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: orders-rabbitmq
  labels:
    helm.sh/chart: orders-1.2.2
    app.kubernetes.io/name: orders
    app.kubernetes.io/instance: orders
    app.kubernetes.io/component: rabbitmq
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  serviceName: orders-rabbitmq
  selector:
    matchLabels:
      app.kubernetes.io/name: orders
      app.kubernetes.io/instance: orders
      app.kubernetes.io/component: rabbitmq
      app.kubernetes.io/owner: retail-store-sample
  template:
    metadata:
      labels:
        app.kubernetes.io/name: orders
        app.kubernetes.io/instance: orders
        app.kubernetes.io/component: rabbitmq
        app.kubernetes.io/owner: retail-store-sample
    spec:
      containers:
        - name: rabbitmq
          image: "public.ecr.aws/docker/library/rabbitmq:3-management"
          imagePullPolicy: IfNotPresent
          ports:
          - name: amqp
            containerPort: 5672
            protocol: TCP
          - name: http
            containerPort: 15672
            protocol: TCP
          volumeMounts:
          - name: data
            mountPath: "/var/lib/rabbitmq/mnesia"
      volumes:
      - name: data
        emptyDir: {}

# ===============================================================================
# CHECKOUT SERVICE COMPONENTS
# Purpose: Checkout processing microservice with Redis cache
# ===============================================================================

# ServiceAccount: Identity for checkout service
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: checkout
  labels:
    helm.sh/chart: checkout-1.2.2
    app.kubernetes.io/name: checkout
    app.kubernetes.io/instance: checkout
    app.kubernetes.io/component: service
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm

# ConfigMap: Checkout service configuration
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: checkout
data:
  RETAIL_CHECKOUT_PERSISTENCE_PROVIDER: redis
  RETAIL_CHECKOUT_PERSISTENCE_REDIS_URL: redis://checkout-redis:6379
  RETAIL_CHECKOUT_ENDPOINTS_ORDERS: http://orders:80

# Service: Redis cache endpoint
---
apiVersion: v1
kind: Service
metadata:
  name: checkout-redis
  labels:
    helm.sh/chart: checkout-1.2.2
    app.kubernetes.io/name: checkout
    app.kubernetes.io/instance: checkout
    app.kubernetes.io/component: redis
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 6379
      targetPort: redis
      protocol: TCP
      name: redis
  selector:
    app.kubernetes.io/name: checkout
    app.kubernetes.io/instance: checkout
    app.kubernetes.io/component: redis
    app.kubernetes.io/owner: retail-store-sample

# Service: Checkout API endpoint
---
apiVersion: v1
kind: Service
metadata:
  name: checkout
  labels:
    helm.sh/chart: checkout-1.2.2
    app.kubernetes.io/name: checkout
    app.kubernetes.io/instance: checkout
    app.kubernetes.io/component: service
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: checkout
    app.kubernetes.io/instance: checkout
    app.kubernetes.io/component: service
    app.kubernetes.io/owner: retail-store-sample

# Deployment: Checkout service application
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: checkout
  labels:
    helm.sh/chart: checkout-1.2.2
    app.kubernetes.io/name: checkout
    app.kubernetes.io/instance: checkout
    app.kubernetes.io/component: service
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: checkout
      app.kubernetes.io/instance: checkout
      app.kubernetes.io/component: service
      app.kubernetes.io/owner: retail-store-sample
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/name: checkout
        app.kubernetes.io/instance: checkout
        app.kubernetes.io/component: service
        app.kubernetes.io/owner: retail-store-sample
    spec:
      serviceAccountName: checkout
      securityContext:
        fsGroup: 1000
      containers:
        - name: checkout
          envFrom:
            - configMapRef:
                name: checkout
          securityContext:
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
          image: "public.ecr.aws/aws-containers/retail-store-sample-checkout:1.2.2"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
          resources:
            limits:
              memory: 256Mi
            requests:
              cpu: 128m
              memory: 256Mi
          volumeMounts:
            - mountPath: /tmp
              name: tmp-volume
      volumes:
        - name: tmp-volume
          emptyDir:
            medium: Memory

# Deployment: Redis cache
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: checkout-redis
  labels:
    helm.sh/chart: checkout-1.2.2
    app.kubernetes.io/name: checkout
    app.kubernetes.io/instance: checkout
    app.kubernetes.io/component: redis
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: checkout
      app.kubernetes.io/instance: checkout
      app.kubernetes.io/component: redis
      app.kubernetes.io/owner: retail-store-sample
  template:
    metadata:
      labels:
        app.kubernetes.io/name: checkout
        app.kubernetes.io/instance: checkout
        app.kubernetes.io/component: redis
        app.kubernetes.io/owner: retail-store-sample
    spec:
      containers:
        - name: redis
          image: "redis:6.0-alpine"
          imagePullPolicy: IfNotPresent
          ports:
            - name: redis
              containerPort: 6379
              protocol: TCP

# ===============================================================================
# UI SERVICE COMPONENTS - MODERN ALB IMPLEMENTATION
# Purpose: Frontend web application with Application Load Balancer
# ===============================================================================

# ServiceAccount: Identity for UI service
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ui
  labels:
    helm.sh/chart: ui-1.2.2
    app.kubernetes.io/name: ui
    app.kubernetes.io/instance: ui
    app.kubernetes.io/component: service
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm

# ConfigMap: UI service configuration with backend endpoints
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ui
data:
  RETAIL_UI_ENDPOINTS_CATALOG: http://catalog
  RETAIL_UI_ENDPOINTS_CARTS: http://carts
  RETAIL_UI_ENDPOINTS_CHECKOUT: http://checkout
  RETAIL_UI_ENDPOINTS_ORDERS: http://orders

# Service: UI service endpoint (ClusterIP for ALB integration)
# Kind: Service - Changed from LoadBalancer to ClusterIP for ALB integration
---
apiVersion: v1
kind: Service
metadata:
  name: ui
  labels:
    helm.sh/chart: ui-1.2.2
    app.kubernetes.io/name: ui
    app.kubernetes.io/instance: ui
    app.kubernetes.io/component: service
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP  # Changed from LoadBalancer to ClusterIP for ALB
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: ui
    app.kubernetes.io/instance: ui
    app.kubernetes.io/component: service
    app.kubernetes.io/owner: retail-store-sample

# Deployment: UI application
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ui
  labels:
    helm.sh/chart: ui-1.2.2
    app.kubernetes.io/name: ui
    app.kubernetes.io/instance: ui
    app.kubernetes.io/component: service
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: ui
      app.kubernetes.io/instance: ui
      app.kubernetes.io/component: service
      app.kubernetes.io/owner: retail-store-sample
  template:
    metadata:
      annotations:
        prometheus.io/path: /actuator/prometheus
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/name: ui
        app.kubernetes.io/instance: ui
        app.kubernetes.io/component: service
        app.kubernetes.io/owner: retail-store-sample
    spec:
      serviceAccountName: ui
      securityContext:
        fsGroup: 1000
      containers:
        - name: ui
          env:
            - name: JAVA_OPTS
              value: -XX:MaxRAMPercentage=75.0 -Djava.security.egd=file:/dev/urandom
            - name: METADATA_KUBERNETES_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: METADATA_KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: METADATA_KUBERNETES_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          envFrom:
            - configMapRef:
                name: ui
          securityContext:
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
          image: "public.ecr.aws/aws-containers/retail-store-sample-ui:1.2.2"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8080
            initialDelaySeconds: 10
          resources:
            limits:
              memory: 512Mi
            requests:
              cpu: 128m
              memory: 512Mi
          volumeMounts:
            - mountPath: /tmp
              name: tmp-volume
      volumes:
        - name: tmp-volume
          emptyDir:
            medium: Memory

# ===============================================================================
# MODERN APPLICATION LOAD BALANCER (ALB) IMPLEMENTATION
# Purpose: Replace Classic Load Balancer with modern ALB using Ingress
# Benefits: Better performance, advanced routing, SSL termination, cost-effective
# ===============================================================================

# Ingress: Modern ALB implementation with advanced routing
# Kind: Ingress - Manages external access to services with HTTP/HTTPS routing
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: retail-store-alb
  annotations:
    # AWS Load Balancer Controller annotations for ALB
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}]'
    alb.ingress.kubernetes.io/healthcheck-path: /actuator/health/readiness
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '30'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '3'
    # Optional: Add WAF protection
    # alb.ingress.kubernetes.io/wafv2-acl-arn: arn:aws:wafv2:region:account:webacl/name
    # Optional: Add custom domain
    # alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:region:account:certificate/cert-id
  labels:
    app.kubernetes.io/name: retail-store
    app.kubernetes.io/component: ingress
spec:
  rules:
    # Main application route
    - http:
        paths:
          # UI Frontend - Main application
          - path: /
            pathType: Prefix
            backend:
              service:
                name: ui
                port:
                  number: 80
          # API Routes for microservices (optional direct access)
          - path: /api/catalog
            pathType: Prefix
            backend:
              service:
                name: catalog
                port:
                  number: 80
          - path: /api/carts
            pathType: Prefix
            backend:
              service:
                name: carts
                port:
                  number: 80
          - path: /api/orders
            pathType: Prefix
            backend:
              service:
                name: orders
                port:
                  number: 80
          - path: /api/checkout
            pathType: Prefix
            backend:
              service:
                name: checkout
                port:
                  number: 80

# ===============================================================================
# DEPLOYMENT NOTES AND MODERN PRACTICES
# ===============================================================================

# MODERN ALB BENEFITS vs CLASSIC LOAD BALANCER:
# 1. Cost Effective: Pay per ALB rule instead of per load balancer
# 2. Advanced Routing: Path-based, host-based, header-based routing
# 3. SSL Termination: Integrated with AWS Certificate Manager
# 4. WAF Integration: Built-in security with AWS WAF
# 5. Better Health Checks: More granular health check options
# 6. HTTP/2 Support: Modern protocol support
# 7. WebSocket Support: Real-time application support

# PREREQUISITES FOR ALB:
# 1. AWS Load Balancer Controller installed in cluster
# 2. Proper IAM permissions for ALB creation
# 3. VPC with public subnets in multiple AZs
# 4. Security groups allowing HTTP/HTTPS traffic

# DEPLOYMENT ORDER:
# 1. Deploy databases (StatefulSets)
# 2. Deploy backend services (Deployments)
# 3. Deploy frontend service (Deployment)
# 4. Deploy Ingress (ALB creation)

# MONITORING AND OBSERVABILITY:
# - Prometheus metrics enabled on all services
# - Health checks configured for all deployments
# - Readiness probes for proper load balancer integration
# - Resource limits and requests for proper scheduling

# SECURITY FEATURES:
# - Non-root containers with specific user IDs
# - Read-only root filesystems
# - Dropped Linux capabilities
# - Security contexts for all containers
# - Secrets for sensitive data storage

# ===============================================================================
# END OF KUBERNETES MANIFESTS v02
# ===============================================================================